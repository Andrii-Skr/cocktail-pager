// app/page.tsx
"use client";

import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import toast from "react-hot-toast";

import useFingerprintId from "@/hooks/useDeviceId";
import CocktailSwiper from "@/components/CocktailSwiper";

export default function Home() {
  /* 1. –ö–æ–∫—Ç–µ–π–ª–∏ ------------------------------------------------------------ */
  const { data: cocktails = [], error } = useQuery({
    queryKey: ["cocktails"],
    queryFn: async () => {
      const res = await fetch("/api/cocktails");
      if (!res.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–∫—Ç–µ–π–ª–∏");
      return res.json();
    },
  });

  /* 2. Fingerprint --------------------------------------------------------- */
  const deviceId = useFingerprintId();
  const ready    = !!deviceId;

  /* 3. –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ —Ç–∞–ø–∞ ------------------------------------ */
  const [clickLock, setClickLock] = useState(false);

  /* 4. –ú—É—Ç–∞—Ü–∏—è ¬´—Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑¬ª -------------------------------------------- */
  const orderMutation = useMutation({
    mutationFn: async (cocktailId: number) =>
      fetch("/api/orders", {
        method : "POST",
        body   : JSON.stringify({ cocktailId, deviceId }),
        headers: { "Content-Type": "application/json" },
      }),
    onMutate: () => setClickLock(true),              // ‚Üê –±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
    onSuccess: () => toast.success("üõé –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!"),
    onError  : () => toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑"),
    onSettled: () => setClickLock(false),            // ‚Üê —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫
  });

  /* 5. UI ------------------------------------------------------------------ */
  return (
    <main className="h-screen overflow-hidden bg-zinc-950 text-white">
      {error ? (
        <div className="p-4 text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–∫—Ç–µ–π–ª–µ–π</div>
      ) : cocktails.length ? (
        <CocktailSwiper
          cocktails={cocktails}
          onOrder={(id) => {
            /* –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ –∏–¥—ë—Ç –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º */
            if (orderMutation.isPending || clickLock) return;
            orderMutation.mutate(id);
          }}
          // disabled={!ready || orderMutation.isPending || clickLock}
        />
      ) : (
        <div className="p-4">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>
      )}
    </main>
  );
}
